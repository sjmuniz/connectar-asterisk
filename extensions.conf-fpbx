; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=no
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;
;autofallthrough=no
;
;
;
; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
; a Trie to find the best matching pattern is used. In dialplans
; with more than about 20-40 extensions in a single context, this
; new algorithm can provide a noticeable speedup.
; With 50 extensions, the speedup is 1.32x
; with 88 extensions, the speedup is 2.23x
; with 138 extensions, the speedup is 3.44x
; with 238 extensions, the speedup is 5.8x
; with 438 extensions, the speedup is 10.4x
; With 1000 extensions, the speedup is ~25x
; with 10,000 extensions, the speedup is 374x
; Basically, the new algorithm provides a flat response
; time, no matter the number of extensions.
;
; By default, the old pattern matcher is used.
;
; ****This is a new feature! *********************
; The new pattern matcher is for the brave, the bold, and
; the desperate. If you have large dialplans (more than about 50 extensions
; in a context), and/or high call volume, you might consider setting
; this value to "yes" !!
; Please, if you try this out, and are forced to return to the
; old pattern matcher, please report your reasons in a bug report
; on https://issues.asterisk.org. We have made good progress in providing
; something compatible with the old matcher; help us finish the job!
;
; This value can be switched at runtime using the cli command "dialplan set extenpatternmatchnew true"
; or "dialplan set extenpatternmatchnew false", so you can experiment to your hearts content.
;
;extenpatternmatchnew=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on a dialplan reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=no
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
;userscontext=default
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"
;#include <filename.conf>
;#include filename.conf
;
; You can execute a program or script that produces config files, and they
; will be inserted where you insert the #exec command. The #exec command
; works on all asterisk configuration files.  However, you will need to
; activate them within asterisk.conf with the "execincludes" option.  They
; are otherwise considered a security risk.
;#exec /opt/bin/build-extra-contexts.sh
;#exec /opt/bin/build-extra-contexts.sh --foo="bar"
;#exec </opt/bin/build-extra-contexts.sh --foo="bar">
;#exec "/opt/bin/build-extra-contexts.sh --foo=\"bar\""
;

; The "Globals" category contains global variables that can be referenced
; in the dialplan with the GLOBAL dialplan function:
; ${GLOBAL(VARIABLE)}
; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
; Unix/Linux environmental variables can be reached with the ENV dialplan
; function: ${ENV(VARIABLE)}
;
[globals]
CONSOLE=Console/dsp				; Console interface for demo
;CONSOLE=DAHDI/1
;CONSOLE=Phone/phone0
IAXINFO=guest					; IAXtel username/password
;IAXINFO=myuser:mypass
TRUNK=DAHDI/G2					; Trunk interface
;
; Note the 'G2' in the TRUNK variable above. It specifies which group (defined
; in chan_dahdi.conf) to dial, i.e. group 2, and how to choose a channel to use
; in the specified group. The four possible options are:
;
; g: select the lowest-numbered non-busy DAHDI channel
;    (aka. ascending sequential hunt group).
; G: select the highest-numbered non-busy DAHDI channel
;    (aka. descending sequential hunt group).
; r: use a round-robin search, starting at the next highest channel than last
;    time (aka. ascending rotary hunt group).
; R: use a round-robin search, starting at the next lowest channel than last
;    time (aka. descending rotary hunt group).
;
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
;TRUNK=IAX2/user:pass@provider

;FREENUMDOMAIN=mydomain.com                     ; domain to send on outbound
                                                ; freenum calls (uses outbound-freenum
                                                ; context)

;
; WARNING WARNING WARNING WARNING
; If you load any other extension configuration engine, such as pbx_ael.so,
; your global variables may be overridden by that file.  Please take care to
; use only one location to set global variables, and you will likely save
; yourself a ton of grief.
; WARNING WARNING WARNING WARNING
;
; Any category other than "General" and "Globals" represent
; extension contexts, which are collections of extensions.
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches
;	anything starting with 9011 excluding 9011 itself)
;   ! - wildcard, causes the matching process to complete as soon as
;       it can unambiguously determine that no other matches are possible
;
; For example, the extension _NXXXXXX would match normal 7 digit dialings,
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceded by a one.
;
; Each step of an extension is ordered by priority, which must always start
; with 1 to be considered a valid extension.  The priority "next" or "n" means
; the previous priority plus one, regardless of whether the previous priority
; was associated with the current extension or not.  The priority "same" or "s"
; means the same as the previously specified priority, again regardless of
; whether the previous entry was for the same extension.  Priorities may be
; immediately followed by a plus sign and another integer to add that amount
; (most useful with 's' or 'n').  Priorities may then also have an alias, or
; label, in parentheses after their name which can be used in goto situations.
;
; Contexts contain several lines, one for each step of each extension.  One may
; include another context in the current one as well, optionally with a date
; and time.  Included contexts are included in the order they are listed.
; Switches may also be included within a context.  The order of matching within
; a context is always exact extensions, pattern match extensions, includes, and
; switches.  Includes are always processed depth-first.  So for example, if you
; would like a switch "A" to match before context "B", simply put switch "A" in
; an included context "C", where "C" is included in your original context
; before "B".
;
;[context]
;
;autohints = yes
; If enabled for a context, a device state hint will be automatically created in
; the context with the name of the device and updated with device state changes.
;
;exten => someexten,{priority|label{+|-}offset}[(alias)],application(arg1,arg2,...)
;
; Timing list for includes is
;
;   <time range>,<days of week>,<days of month>,<months>[,<timezone>]
;
; Note that ranges may be specified to wrap around the ends.  Also, minutes are
; fine-grained only down to the closest even minute.
;
;

[usuario]
exten => _X.,1,Dial(SIP/${EXTEN}@ss)

[from-iplan]
;exten => _0115217354X,1,Goto(from-iplan_h,${EXTEN},1)
;exten =>_X.,1,Goto(from-iplan_ok,${EXTEN},1)

exten => _0115217354[025],1,NoOp()
exten => _0115217354[025],n,Set(DNIS=${EXTEN})
exten => _0115217354[025],n,Goto(ivr_solnikFPBX,s,1)

exten => _01152173541,1,Dial(SIP/5217354101152173541@freepbx)
exten => _01152173543,1,Dial(SIP/5217354301152173543@freepbx)
exten => _01152173544,1,Dial(SIP/5217354401152173544@freepbx)
exten => _01152173546,1,Dial(SIP/5217354601152173546@freepbx)
exten => _01152173547,1,Dial(SIP/5217354701152173547@freepbx)
exten => _01152173548,1,Dial(SIP/5217354801152173548@freepbx)

[from-iplan_h]
exten => _X.,1,GotoIfTime(*,sun,*,*?horario)
exten => _X.,n,GotoIfTime(*,sat,*,*?horario)
exten => _X.,n,GotoIfTime(18:00-23:59,*,*,*?horario)
exten => _X.,n,GotoIfTime(00:00-08:59,*,*,*?horario)
exten => _X.,n,Goto(from-iplan_ok,${EXTEN},1)

exten => _X.,n(horario),Background(/var/lib/asterisk/sounds/solnik_horario)

[from-iplan_ok]
exten => _X,1,Set(CALLERID(name)=${CALLERID(num)})
exten => _X,n,Set(CALLERID(num)=sip2)
exten => _X.,n,Dial(SIP/${EXTEN}@bitrix2)

exten => _0115217354[025],1,NoOp(ivr)
exten => _0115217354[025],n,Set(DNIS=${EXTEN})
exten => _0115217354[025],n,NoOp(DNIS=${DNIS})
exten => _0115217354[025],n,Set(CALLERID(name)=${CALLERID(num)})
exten => _0115217354[025],n,Goto(ivr_solnik,s,1)

exten => _01152173541,1,Set(CALLERID(num)=sip14)
exten => _01152173541,n,Dial(SIP/5217354101152173541@bitrix_sip14)
exten => _01152173543,1,Set(CALLERID(num)=sip16)
exten => _01152173543,n,Dial(SIP/5217354301152173543@bitrix_sip16)
exten => _01152173544,1,Set(CALLERID(num)=sip18)
exten => _01152173544,n,Dial(SIP/5217354401152173544@bitrix_sip18)
exten => _01152173546,1,Set(CALLERID(num)=sip20)
exten => _01152173546,n,Dial(SIP/5217354601152173546@bitrix_sip20)
exten => _01152173547,1,Set(CALLERID(num)=sip22)
exten => _01152173547,n,Dial(SIP/5217354701152173547@bitrix_sip22)
exten => _01152173548,1,Set(CALLERID(num)=sip24)
exten => _01152173548,n,Dial(SIP/5217354801152173548@bitrix_sip24)

exten => _01152173521,1,Set(CALLERID(num)=sip28)
exten => _01152173521,n,Dial(SIP/52173521@bitrix_sip28)

exten => _01152173522,1,Set(CALLERID(num)=sip30)
exten => _01152173522,n,Dial(SIP/52173522@bitrix_sip30)

[ivr_solnik]
exten => s,1,NoOp(hola)
exten => s,n,Answer(500)
exten => s,n(loop),Background(/var/lib/asterisk/sounds/solnik)
exten => s,n,WaitExten()

exten => 1,1,Set(CALLERID(num)=sip14)
exten => 1,n,Dial(SIP/52173541${DNIS}@bitrix_sip14)
exten => 2,1,Set(CALLERID(num)=sip16)
exten => 2,n,Dial(SIP/52173543${DNIS}@bitrix_sip16)
exten => 3,1,Set(CALLERID(num)=sip18)
exten => 3,n,Dial(SIP/52173544${DNIS}@bitrix_sip18)
exten => 4,1,Set(CALLERID(num)=sip20)
exten => 4,n,Dial(SIP/52173546${DNIS}@bitrix_sip20)
exten => 5,1,Set(CALLERID(num)=sip22)
exten => 5,n,Dial(SIP/52173547${DNIS}@bitrix_sip22)
exten => 6,1,Set(CALLERID(num)=sip24)
exten => 6,n,Dial(SIP/52173548${DNIS}@bitrix_sip24)

[ivr_solnikFPBX]
exten => s,1,NoOp(hola)
exten => s,n,Answer(500)
exten => s,n(loop),Background(/var/lib/asterisk/sounds/solnik)
exten => s,n,WaitExten()

exten => 1,1,Dial(SIP/52173541${DNIS}@freepbx)
exten => 2,1,Dial(SIP/52173543${DNIS}@freepbx)
exten => 3,1,Dial(SIP/52173544${DNIS}@freepbx)
exten => 4,1,Dial(SIP/52173546${DNIS}@freepbx)
exten => 5,1,Dial(SIP/52173547${DNIS}@freepbx)
exten => 6,1,Dial(SIP/52173548${DNIS}@freepbx)

[sebas1]
exten => _X.,1,Dial(SIP/${EXTEN}@sebas2)

[bitrix2]
exten => _X.,1,MixMonitor(${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${CALLERID(num)}-${EXTEN}.wav)
exten => _X.,n,Goto(bitrix2,${EXTEN},1)

[microvoz]
exten => _12345678,1,Set(CALLERID(name)=${CALLERID(num)})
exten => _12345678,n,Set(CALLERID(num)=sip4)
exten => _12345678,n,Dial(SIP/${EXTEN}@bitrix3)
exten => _12340000,1,Set(CALLERID(name)=${CALLERID(num)})
exten => _12340000,n,Set(CALLERID(num)=sip6)
exten => _12340000,n,Dial(SIP/${EXTEN}@bitrix_sip6)

;exten => _12341111,1,Set(CALLERID(name)=${CALLERID(num)})
;exten => _12341111,n,Set(CALLERID(num)=sip8)
;exten => _12341111,n,Dial(SIP/${EXTEN}@bitrix_sip8)
;exten => _12342222,1,Set(CALLERID(name)=${CALLERID(num)})
;exten => _12342222,n,Set(CALLERID(num)=sip26)
;exten => _12342222,n,Dial(SIP/${EXTEN}@bitrix_sip26)

exten => _12341111,1,Dial(SIP/${EXTEN}@freepbx)
exten => _12342222,1,Dial(SIP/${EXTEN}@freepbx)
[bitrix]
exten => _X.,1,AGI(/etc/asterisk/dial.pl)
